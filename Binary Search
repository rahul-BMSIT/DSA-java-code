public class BinarySearch {
    public static int binarySearch(int[] arr, int target) {
        int left = 0;
        int right = arr.length - 1;

        while (left <= right) {
            int mid = left + (right - left) / 2;

            if (arr[mid] == target) {
                return mid;
            } else if (arr[mid] < target) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }

        return -1; // target not found in array
    }

    public static void main(String[] args) {
        int[] arr = {1, 2, 3, 4, 5, 6, 7, 8, 9};
        int target = 7;

        int index = binarySearch(arr, target);

        if (index == -1) {
            System.out.println("Target value not found in array.");
        } else {
            System.out.println("Target value found at index " + index + " in array.");
        }
    }
}
In this program, the binarySearch method takes in an integer array arr and a target integer value target as arguments, and returns the index of the target value in the array if it exists. Otherwise, it returns -1.

The binary search algorithm works by repeatedly dividing the search interval in half. The algorithm begins with an interval covering the whole array. If the target value is less than the middle element of the interval, it narrows the interval to the lower half. Otherwise, it narrows the interval to the upper half. Repeatedly dividing the search interval in half allows the algorithm to find the target value efficiently in logarithmic time.

In the main method, we create an example sorted array arr and a target value target. We then call the binarySearch method with these values, and store the result in the index variable. Finally, we print out a message to indicate whether the target value was found in the array and at what index.






